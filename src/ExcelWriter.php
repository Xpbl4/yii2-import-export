<?php

namespace xpbl4\import;

use PhpOffice\PhpSpreadsheet\Document\Properties;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use yii\helpers\ArrayHelper;

/**
 * Writes Excel files using PHPExcel.
 * @package xpbl4\import
 */
class ExcelWriter extends BaseWriter
{

	/**
	 * @var \PhpOffice\PhpSpreadsheet\Spreadsheet
	 */
	private $_spreadsheet;

	/**
	 * @var \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet
	 */
	private $_worksheet;

	/**
	 * @var \PhpOffice\PhpSpreadsheet\Writer\IWriter
	 */
	private $_writer;

	/**
	 * Returns an excel column name.
	 *
	 * @param  integer  $index  the column index number
	 * @return string
	 */
	public static function columnName($index)
	{
		$_name = '';
		if (floor($index / 26) > 0)
			$_name .= self::columnName(floor($index / 26) - 1);

		$_name .= $index > 0 ? chr(ord('A') + $index % 26) : 'A';

		return $_name;
 	}

	/**
	 * Writes to an Excel file.
	 * @param string $writerType PhpOffice\PhpSpreadsheet\Writer type
	 * @return string filename
	 */
	public function write($writerType = IOFactory::WRITER_XLSX)
	{
		/**
		 * @var \yii\db\ActiveRecord $exporter
		 */
		$exporter = $this->source;
		$filename = ArrayHelper::getValue($this->options, 'filename',
			'export-'.\yii\helpers\Inflector::camel2words(get_class($exporter)).'.'.strtolower($writerType));

		$this->_spreadsheet = new Spreadsheet();
		$_properties = ArrayHelper::merge([
			'creator' => '',
			'title' => '',
			'subject' => '',
			'category' => '',
			'keywords' => '',
			'manager' => '',
			'description' => \Yii::t('xpbl4/export', 'Grid export generated by widget (xpbl4/yii2-export)'),
			'company' => 'Desorden Studio',
			'created' => date('Y-m-d H:i:s'),
		], ArrayHelper::getValue($this->options, 'properties', []));
		$_docProperties = new Properties();
		array_map(function ($key) use ($_properties, $_docProperties) {
			$method = 'set'.ucfirst($key);
			if (method_exists($_docProperties, $method))
				$_docProperties->$method($_properties[$key]);
		}, array_keys($_properties));
		$this->_spreadsheet->setProperties($_docProperties);

		$this->initWriter($writerType);
		$this->_worksheet = $this->_spreadsheet->getActiveSheet();

		// Set headers
		//$this->generateHeaders();

		foreach ($exporter->export() as $rowNum => $row) {
			foreach ($row as $colNum => $value) {
				$this->_worksheet->getCell([$colNum, $rowNum + 1])->setValue($value);
			}
		}

		//$writer = IOFactory::createWriter($this->_spreadsheet, $writerType);
		$this->_writer->save(sys_get_temp_dir().'/'.$filename);
		//$this->_writer->save('php://output');

		return $filename;
	}

	/**
	 * Initializes PhpSpreadsheet Writer Object Instance
	 *
	 * @param  string  $type  the writer type as set in export config
	 * @throws \PhpOffice\PhpSpreadsheet\Writer\Exception
	 */
	public function initWriter($type)
	{
		$this->_writer = IOFactory::createWriter($this->_spreadsheet, $type);
		$settings = ArrayHelper::getValue($this->exportOptions, $type, []);
		switch ($type) {
			case IOFactory::WRITER_CSV:
				$delimiter = ArrayHelper::getValue($settings, 'delimiter', "\t");
				$this->_writer
					->setDelimiter($delimiter)
					->setUseBOM(true);
				break;
		}
		//$this->raiseEvent('onInitWriter', [$this->_objWriter, $this]);
	}

}
